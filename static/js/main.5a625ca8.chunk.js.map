{"version":3,"sources":["redux/constants.ts","redux/helpers.ts","redux/reducer.ts","api.ts","redux/sagas.ts","redux/store.ts","Components/CityList/CityListItem.tsx","Components/CityList/CityList.tsx","Containers/CityListContainer.ts","redux/actions.ts","constants.ts","Components/WeatherTable.tsx","Containers/WeatherTableContainer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ADD_CITY","REMOVE_CITY","FETCH_WEATHER_DATA","FETCH_WEATHER_DATA_SUCCESS","FETCH_WEATHER_DATA_FAILURE","REMOVE_WEATHER_DATA","cityNameFilter","data","city","filter","c","cityDataFilter","coord","d","lat","toFixed","lon","initState","weatherData","cities","error","rootReducer","state","action","type","payload","Actions","request","params","axios","get","then","res","daily","map","temp","day","windSpeed","wind_speed","weather","main","slice","fetchWeatherDataEffect","rootSaga","call","put","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","CityListItem","info","activeCity","addCity","removeCity","fetchWeatherData","removeWeatherData","useState","active","setActive","FormControlLabel","control","Checkbox","checked","onChange","name","label","CityList","useEffect","includes","FormControl","component","className","FormLabel","FormGroup","id","mapDispatchToProps","connector","connect","WEEK_DAYS","TABLE_HEADERS","numeric","sort","WeatherTableHeader","order","orderBy","onRequestSort","TableHead","TableRow","h","TableCell","align","TableSortLabel","direction","onClick","WeatherTable","setOrder","setOrderBy","TableContainer","Paper","Table","property","TableBody","i","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a625ca8.chunk.js","sourcesContent":["export const ADD_CITY = 'ADD_CITY'\r\nexport const REMOVE_CITY = 'REMOVE_CITY'\r\n\r\nexport const FETCH_WEATHER_DATA = 'FETCH_WEATHER_DATA'\r\nexport const FETCH_WEATHER_DATA_SUCCESS = 'FETCH_WEATHER_DATA_SUCCESS'\r\nexport const FETCH_WEATHER_DATA_FAILURE = 'FETCH_WEATHER_DATA_FAILURE'\r\n\r\nexport const REMOVE_WEATHER_DATA = 'REMOVE_WEATHER_DATA'","import { CityData, Coordinates } from '../types'\r\n\r\nexport const cityNameFilter = (data: string[], city: string): string[] => data.filter((c: string) => c !== city)\r\nexport const cityDataFilter = (data: CityData[], coord: Coordinates): CityData[] => \r\n  data.filter((d: CityData) => d.lat !== +coord.lat.toFixed(2) && d.lon !== +coord.lon.toFixed(2))","import * as Actions from './constants'\r\nimport { Action, State } from '../types'\r\nimport { cityNameFilter, cityDataFilter } from './helpers'\r\n\r\nconst initState: State = {\r\n  weatherData: [],\r\n  cities: ['Amsterdam'],\r\n  error: null\r\n}\r\n\r\nconst rootReducer = (state = initState, action: Action): State =>  {\r\n  const { type, payload } = action\r\n  switch (type) {\r\n    case Actions.ADD_CITY:\r\n      return {...state, cities: [...state.cities, payload]}\r\n    case Actions.REMOVE_CITY:\r\n      return {...state, cities: cityNameFilter(state.cities, payload)}\r\n    case Actions.FETCH_WEATHER_DATA_SUCCESS:\r\n      return {...state, weatherData: [...state.weatherData, payload]}\r\n    case Actions.FETCH_WEATHER_DATA_FAILURE:\r\n      return {...state, error: payload}\r\n    case Actions.REMOVE_WEATHER_DATA:\r\n      return {...state, weatherData: cityDataFilter(state.weatherData, payload)}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default rootReducer","import axios from 'axios'\r\nimport { Coordinates, DailyInfo } from './types'\r\n\r\nconst API_KEY = '4bcb36b65a133c9e168dec0b9c709f65'\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5/onecall?exclude=current,minutely,hourly,alerts'\r\n\r\nexport default function request(params: Coordinates) {\r\n  return axios.get(`${BASE_URL}&lat=${params.lat}&lon=${params.lon}&appid=${API_KEY}`)\r\n    .then(res => {\r\n      let { data } = res\r\n      return {\r\n        lat: data.lat,\r\n        lon: data.lon,\r\n        daily: data.daily.map((d: any): DailyInfo => ({\r\n          temp: d.temp.day,\r\n          windSpeed: d.wind_speed,\r\n          weather: d.weather[0].main\r\n        })).slice(0, 7) // slice needed because server sends info about 8 coming days instead of 7\r\n      }\r\n    })\r\n}","import * as Actions from './constants'\r\nimport { call, put, takeLatest } from 'redux-saga/effects'\r\nimport { Action } from '../types'\r\n\r\nimport request from '../api'\r\n\r\nfunction* fetchWeatherDataEffect({ payload }: Action) {\r\n  try {\r\n    const data = yield call(request, payload)\r\n    yield put({ type: Actions.FETCH_WEATHER_DATA_SUCCESS, payload: data })\r\n  } catch(e) {\r\n    yield put({ type: Actions.FETCH_WEATHER_DATA_FAILURE, payload: e })\r\n  }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield takeLatest(Actions.FETCH_WEATHER_DATA, fetchWeatherDataEffect)\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport rootReducer from './reducer'\r\nimport rootSaga from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(\r\n  applyMiddleware(sagaMiddleware)\r\n))\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store","import React, { useState } from 'react'\r\nimport { FormControlLabel, Checkbox } from '@material-ui/core'\r\nimport { Coordinates, Action } from '../../types'\r\nimport { CityInfo } from '../types'\r\n\r\ninterface ItemProps {\r\n  info: CityInfo;\r\n  activeCity: boolean;\r\n  addCity(name: string): Action;\r\n  removeCity(name: string): Action;\r\n  fetchWeatherData({ lon, lat }: Coordinates): Action;\r\n  removeWeatherData({ lon, lat }: Coordinates): Action;\r\n}\r\n\r\nconst CityListItem = ({ info, activeCity, addCity, removeCity, fetchWeatherData, removeWeatherData }: ItemProps) => {\r\n  const [active, setActive] = useState<boolean>(activeCity)\r\n  const addHandler = (): void => {\r\n    addCity(info.name)\r\n    fetchWeatherData(info.coord)\r\n  }\r\n  const removeHandler = (): void => {\r\n    removeCity(info.name)\r\n    removeWeatherData(info.coord)\r\n  }\r\n  const changeHandler = (): void => {\r\n    setActive(!active)\r\n    !active ? addHandler() : removeHandler()\r\n  }\r\n  return (\r\n    <FormControlLabel \r\n      control={<Checkbox checked={active} onChange={changeHandler} />}\r\n      label={info.name}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CityListItem","import React, { useEffect } from 'react'\r\nimport data from '../../data/data.json'\r\nimport { ListProps, CityInfo } from '../types'\r\n\r\nimport { FormControl, FormGroup, FormLabel } from '@material-ui/core'\r\n\r\nimport CityListItem from './CityListItem'\r\n\r\nconst CityList = ({ cities, addCity, removeCity, fetchWeatherData, removeWeatherData }: ListProps) => {\r\n  // needed for initial request on compontent mount\r\n  useEffect(() => {\r\n    for (let city of data) {\r\n      cities.includes(city.name) && fetchWeatherData(city.coord)\r\n    }\r\n  }, [])\r\n  return (\r\n    <FormControl component='fieldset' className=\"mr-5\">\r\n      <FormLabel component='legend'>Netherlands cities</FormLabel>\r\n      <FormGroup>\r\n        {data.map((c: CityInfo) => (\r\n          <CityListItem\r\n            key={c.id}\r\n            info={c}\r\n            addCity={addCity}\r\n            removeCity={removeCity}\r\n            fetchWeatherData={fetchWeatherData}\r\n            removeWeatherData={removeWeatherData}\r\n            activeCity={cities.includes(c.name)}\r\n          />\r\n        ))}\r\n      </FormGroup>\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default CityList\r\n","import { connect } from 'react-redux'\r\nimport { addCity, removeCity, fetchWeatherData, removeWeatherData } from '../redux/actions'\r\nimport { State } from '../types'\r\n\r\nimport CityList from '../Components/CityList/CityList'\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  cities: state.cities\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  addCity,\r\n  removeCity,\r\n  fetchWeatherData,\r\n  removeWeatherData\r\n}\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps) as any\r\n\r\nexport default connector(CityList) as any","import * as Actions from './constants'\r\nimport { Action, Coordinates } from '../types'\r\n\r\nexport const addCity = (payload: string): Action => ({\r\n  type: Actions.ADD_CITY,\r\n  payload\r\n})\r\n\r\nexport const removeCity = (payload: string): Action => ({\r\n  type: Actions.REMOVE_CITY,\r\n  payload\r\n})\r\n\r\nexport const fetchWeatherData = (payload: Coordinates): Action => ({\r\n  type: Actions.FETCH_WEATHER_DATA,\r\n  payload\r\n})\r\n\r\nexport const removeWeatherData = (payload: Coordinates): Action => ({\r\n  type: Actions.REMOVE_WEATHER_DATA,\r\n  payload\r\n})","import { HeaderCell } from './types'\r\n\r\nexport const WEEK_DAYS: string[] = [\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n  'Sunday'\r\n]\r\n\r\nexport const TABLE_HEADERS: HeaderCell[] = [\r\n  {label: 'City', id: 'city', numeric: false, sort: false},\r\n  {label: 'Temperature', id: 'temp', numeric: true, sort: true},\r\n  {label: 'Wind speed', id: 'windSpeed', numeric: true, sort: true},\r\n  {label: 'Weather', id: 'weather', numeric: false, sort: false}\r\n]","import React, { useState } from 'react'\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TableSortLabel\r\n} from '@material-ui/core'\r\nimport { TableProps, Order, HeaderProps } from './types'\r\nimport { HeaderCell, DailyInfo, CityData } from '../types'\r\nimport { TABLE_HEADERS, WEEK_DAYS } from '../constants'\r\n\r\nconst WeatherTableHeader = ({ order, orderBy, onRequestSort }: HeaderProps) => {\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {TABLE_HEADERS.map((h: HeaderCell) => (\r\n          <TableCell\r\n            key={h.id}\r\n            align={h.numeric ? 'right' : 'left'}\r\n          >\r\n            {h.sort ? (\r\n              <TableSortLabel\r\n                active={orderBy === h.id}\r\n                direction={orderBy === h.id ? order : 'asc'}\r\n                onClick={() => onRequestSort(h.id)}\r\n              >\r\n                {h.label}\r\n              </TableSortLabel>\r\n          ) : h.label}\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nconst WeatherTable = ({ cities, data }: TableProps) => {\r\n  const [order, setOrder] = useState<Order>('asc')\r\n  const [orderBy, setOrderBy] = useState<keyof DailyInfo | string>('')\r\n  const handleRequestSort = (property: keyof DailyInfo) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <WeatherTableHeader order={order} orderBy={orderBy} onRequestSort={handleRequestSort} />\r\n        <TableBody>\r\n          {data.map((d: CityData, i: number) => (\r\n            <>\r\n              <TableRow>\r\n                <TableCell>{cities[i]}</TableCell>\r\n              </TableRow>\r\n              {d.daily.map((d: DailyInfo, i: number) => (\r\n                <TableRow>\r\n                  <TableCell align=\"right\">{WEEK_DAYS[i]}</TableCell>\r\n                  <TableCell align=\"right\">{d.temp}</TableCell>\r\n                  <TableCell align=\"right\">{d.windSpeed}</TableCell>\r\n                  <TableCell align=\"right\">{d.weather}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </>\r\n          ))}\r\n        </TableBody>\r\n      </Table> \r\n    </TableContainer>\r\n  )\r\n}\r\n\r\nexport default WeatherTable","import { connect } from 'react-redux'\r\nimport { State } from '../types'\r\n\r\nimport WeatherTable from '../Components/WeatherTable'\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  cities: state.cities,\r\n  data: state.weatherData\r\n})\r\n\r\nconst connector = connect(mapStateToProps) as any\r\n\r\nexport default connector(WeatherTable) as any","import React from 'react';\nimport CityList from './Containers/CityListContainer'\nimport WeatherTable from './Containers/WeatherTableContainer'\n\nconst App = () => {\n  return (\n    <div className=\"container pt-5 d-flex\">\n      <CityList />\n      <WeatherTable />\n    </div>\n  )\n}\n\nexport default App ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}